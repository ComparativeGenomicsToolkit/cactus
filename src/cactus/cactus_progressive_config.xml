<!-- This XML tree contains the parameters to cactus_progressive.py -->
<!-- The distanceToAddToRootAlignment parameter is how much extra divergence distance to allow when aligning children of the root genome -->
<cactusWorkflowConfig distanceToAddToRootAlignment="0.1">
	<constants defaultMemory="mediumMemory" defaultOverlargeMemory="mediumMemory" defaultCpu="1" defaultOverlargeCpu="1">
		<!-- These constants are used to control the amount of memory and cpu the different jobs in a batch are using. -->
  		<defines littleMemory="2000000000" mediumMemory="3500000000" bigMemory="5000000000"/>
  		<!-- These constants are used to control parameters that depend on phylogenetic distance. Setting
  		     useDefault to 0 will force it to use the default divergence controlled parameter -->
  		<divergences useDefault="0" one="0.1" two="0.15" three="0.2" four="0.25" five="0.35"/>
	</constants>
	<!-- The preprocessor tags are used to modify/check the input sequences before alignment -->
	<!-- The cutHeaders preprocess modifies fastsa sequence names to help them pass checkUniqueHeaders. -->
	<!-- cutBefore: all characters up to and including the last occurrence of a character in this string are clipped out -->
	<!-- cutAfter: all characters after and including the first occurrence of a character in this string are clipped out -->
	<preprocessor memory="littleMemory" preprocessJob="cutHeaders" cutBefore="" cutAfter=" 	" active="1"/>
	<!-- The first preprocessor tag checks that the first word of every fasta header is unique, as this is required for HAL. It throws errors if this is not the case -->
	<!-- The checkAssemblyHub option (if enabled) ensures that the first word contains only alphanumeric or '_', '-', ':', or '.' characters, and is unique. If you don't intend to make an assembly hub, you can turn off this option here. -->
	<preprocessor check="1" memory="littleMemory" preprocessJob="checkUniqueHeaders" checkAssemblyHub="1" active="1"/>
	<!-- The preprocessor for cactus_lastzRepeatMask masks every seed that is part of more than XX other alignments, this stops a combinatorial explosion in pairwise alignments -->
	<preprocessor unmask="0" chunkSize="3000000" proportionToSample="0.2" memory="littleMemory" preprocessJob="lastzRepeatMask" minPeriod="50" lastzOpts='--step=3 --ambiguous=iupac,100,100 --ungapped --queryhsplimit=keep,nowarn:1500' gpuLastz="false" active="1"/>
	<!-- Softmask alpha-satellite using the dna-brnn tool -->
	<!-- This preprocessor is off by default, and will replace the lastzRepeatMask preprocessor via command line toggle (or setting active=1)-->
	<!-- It will attempt to load its included "attcc-alpha.knm" model by default unless a different one is specified below -->
	<!-- unmask: unmask all softmasked bases before running (so only intervals masked by dna-brnn are present at end) -->
	<!-- action: one of [softmask, hardmask, clip] -->
	<!-- minLength: only mask intervals > than this length -->
	<preprocessor unmask="1" memory="littleMemory" preprocessJob="dna-brnn" dna-brnnOpts='-A' active="0" action="softmask" cpu="2" minLength="100000"/>
        <!-- Options for trimming ingroups & outgroups using the trim strategy -->
        <!-- Ingroup trim options: -->
        <!-- trimFlanking: The length of flanking sequence to attach
             to the trimmed ingroup sequences -->
        <!-- trimMinSize: The minimum size of uncovered regions
             (*before* adding flanking sequence) to output from the
             trimming process -->
        <!-- trimThreshold: The minimum fraction of bases in a window
             that must have coverage >= 1 for it to be considered
             "covered" and be trimmed away and not be aligned against
             the next outgroup -->
        <!-- trimWindowSize: The size of the window to integrate
             coverage over -->
        <!-- trimOutgroupDepth: The minimum number of outgroup species
             that should be aligned to a region before it is trimmed
             away -->
        <!-- Outgroup trim options: -->
        <!-- trimOutgroupFlanking: The amount of flanking sequence to
             leave on the ends of the trimmed outgroup fragments. NB:
             this value must be larger than the
             'splitIndelsLongerThanThis' value in the realign
             arguments -->

        <!-- keepParalogs: Always align duplicated sequence against
             all outgroups, instead of stopping at the first
             one. Intended to be robust against missing data.-->
        <trimBlast doTrimStrategy="1"
                   trimFlanking="10"
                   trimMinSize="100"
                   trimThreshold="1.0"
                   trimWindowSize="1"
                   trimOutgroupFlanking="2000"
                   trimOutgroupDepth="1"
                   keepParalogs="0"/>
	<setup makeEventHeadersAlphaNumeric="0"/>
	<!-- The caf tag contains parameters for the caf algorithm. -->
	<!-- Increase the chunkSize in the caf tag to reduce the number of blast jobs approximately quadratically -->

	<caf
		chunkSize="25000000"
		realign="0"
		realignArguments="--gapGamma 0.0 --matchGamma 0.9 --diagonalExpansion 4 --splitMatrixBiggerThanThis 10 --constraintDiagonalTrim 0 --alignAmbiguityCharacters --splitIndelsLongerThanThis 99"
		compressFiles="1"
		overlapSize="10000"
		filterByIdentity="0"
		identityRatio="3"
		minimumDistance="0.01"
		minimumSequenceLengthForBlast="30"
		gpuLastz="false"
		lastzMemory="littleMemory"
		lastzDisk="mediumDisk"

		runMapQFiltering="1"
		minimumMapQValue="0.0"
		maxAlignmentsPerSite="5"

		trim="3"
		blockTrim="2"
		annealingRounds="64"
		deannealingRounds="2 4 8"
		minimumTreeCoverage="0.0"
		minimumBlockDegree="2"
		minimumIngroupDegree="1"
		minimumOutgroupDegree="0"
        minimumNumberOfSpecies="1"
        alignmentFilter="filterSecondariesByMultipleSpecies"

		maxAdjacencyComponentSizeRatio="50"
		minLengthForChromosome="1000000"
		proportionOfUnalignedBasesForNewChromosome="0.8"
		maximumMedianSequenceLengthBetweenLinkedEnds="1000"

		alpha="0.001"

		removeRecoverableChains="unequalNumberOfIngroupCopies"
		maxRecoverableChainsIterations="5"
		maxRecoverableChainLength="500000"

		minimumBlockDegreeToCheckSupport="10"
		minimumBlockHomologySupport="0.05"
		phylogenyHomologyUnitType="chain"
		phylogenyDistanceCorrectionMethod="jukesCantor"

	        >
		<!-- The following are parametrised to produce the same results as the default settings,
		within a margin of 0.2% sensitivity, should be very fast for close genomes, these were tuned using the blast/blastParametersScript.py
		We could go even faster for less than 0.05 divergence using, but want to be robust to poor branch length estimates -->
		<divergence
			argName="lastzArguments"
		 	one="--step=2 --ambiguous=iupac,100,100 --ydrop=3000 --notransition"
		 	two="--step=5 --ambiguous=iupac,100,100 --ydrop=3000"
		 	three="--step=4 --ambiguous=iupac,100,100 --ydrop=3000"
		 	four="--step=3 --ambiguous=iupac,100,100 --ydrop=3000"
		 	five="--step=2 --ambiguous=iupac,100,100 --ydrop=3000"
		 	default="--step=1 --ambiguous=iupac,100,100 --ydrop=3000"
		 />
	</caf>

	<!-- The bar tag contains parameters for the bar algorithm. -->
	<!-- runBar Toggle the bar stage on or off. Turned off you get a sparse alignment just using the CAF phase-->
	<!-- bandingLimit is the maximum sequence size fed into the multiple aligner.  Sequences longer than this are trimmed accordingly -->
    <!-- partialOrderAlignment toggles between cPecan and abpoa for the core multiple alignment algorithm.
    abpoa is much faster but not as reliable for diverged sequences -->
	<!-- minimumBlockDegree The minimum number of sequences to form a block in the ancestor -->
	<!-- minimumIngroupDegree The minimum number ingroup sequences to form a block in the ancestor -->
	<!-- minimumOutgroupDegree The minimum number of outgroup sequences to form a block in the ancestor -->
	<!-- minimumNumberOfSpecies The minimum of number of different species for an alignment block to be kept -->
	<bar
		runBar="1"
		bandingLimit="1000000"
		partialOrderAlignment="1"
		minimumBlockDegree="2"
		minimumIngroupDegree="1"
		minimumOutgroupDegree="0"
		minimumNumberOfSpecies="1"
	>
		<!-- Parameters for using cPecan to generate MSAs. -->
		<!-- spanningTrees The number of spanning trees to construct in choosing which pairwise alignments to include
		 in creating the MSA -->
		<!-- gapGamma The weight to put upon indel probabilities in forming the MSA -->
		<!-- matchGamma The weight to put upon match probabilities in forming the MSA -->
		<!-- useBanding Use banded algnment in constructing the pairwise alignments -->
		<!-- splitMatrixBiggerThanThis Split the dynamic programming (DP) matrix into two smaller matrices around matrices
		with an area larger than splitMatrixBiggerThanThis squared, so reducing the total DP -->
		<!-- anchorMatrixBiggerThanThis Search for anchors within DP matrices with an area of
		anchorMatrixBiggerThanThis squared or larger -->
		<!-- repeatMaskMatrixBiggerThanThis  -->
		<!-- diagonalExpansion Expand the DP around anchors by this many diagonal coordinates. -->
		<!-- constraintDiagonalTrim Trim anchors at their ends by this many bases. -->
		<!-- alignAmbiguityCharacters Align together Ns or other wildcards. -->
		<!-- useProgressiveMerging  Progressively merge together pairwise alignments to form MSA, otherwise use a greedy, poset
		method which may be more accurate but which is generally slower for larger numbers of sequences -->
		<!-- pruneOutStubAlignments  -->
		<!-- useMumAnchors  Use maximal unique matches to create alignment anchors, otherwise call out to Lastz-->
		<!-- recursiveMums  If using MUM anchors, recursively search for anchors in gaps. -->
		<pecan
			spanningTrees="5"
			gapGamma="0.0"
			matchGamma="0.2"
			useBanding="1"
			splitMatrixBiggerThanThis="3000"
			anchorMatrixBiggerThanThis="500"
			repeatMaskMatrixBiggerThanThis="500"
			diagonalExpansion="20"
			constraintDiagonalTrim="14"
			alignAmbiguityCharacters="1"
			useProgressiveMerging="1"
			pruneOutStubAlignments="1"
			useMumAnchors="1"
			recursiveMums="1"
		/>

		<!-- Parameters for using abPOA to generate MSAs. -->
		<!-- partialOrderAlignmentWindow a sliding window approach (with hardcoded 50% overlap) is used to perform abpoa alignments.  memory is quadratic in this.  it is applied after bandingLimit -->
		<!-- partialOrderAlignmentMaskFilter trim input sequences as soon as more than this many soft or hard masked bases are encountered (-1=disabled) -->
		<!-- partialOrderAlignmentBand abpoa adaptive band size is <partialOrderAlignmentBand> + <partialOrderAlignmentBandFraction>*<Length>.  Negative value here disables adaptive banding -->
		<!-- partialOrderAlignmentBandFraction abpoa adaptibe band second parameter (see above) -->
		<!-- partialOrderAlignmentSubMatrix (space-separated) list of 25 scores corresponding to the 5x5 ACGTN substitution matrix." -->
		<!-- partialOrderAlignmentGapOpenPenalty1 abpoa gap open penalty (linear gap if 0) -->
		<!-- partialOrderAlignmentGapExtensionPenalty1 abpoa gap extension penalty -->
		<!-- partialOrderAlignmentGapOpenPenalty2 abpoa second gap open penalty (convex mode takes the minimum of both gap models, 0 disables convex) -->
		<!-- partialOrderAlignmentGapExtensionPenalty abpoa second gap extension penalty (convex mode takes the minimum of both gap models) -->
		<!-- partialOrderAlignmentDisableSeeding abpoa disable minimizer seeding. toggling this on will slightly increase accuracy at the cost of speed -->
		<!-- partialOrderAlignmentMinimizerK abpoa kmer size for minimizer seeding. -->
		<!-- partialOrderAlignmentMinimizerW abpoa window size for minimizer seeding. -->
		<!-- partialOrderAlignmentMinimizerMinW abpoa minimum window size. -->
		<!-- partialOrderAlignmentProgressiveMode= use guide tree from jaccard distance matrix to determine poa order -->
		<poa
			partialOrderAlignmentWindow="10000"
			partialOrderAlignmentMaskFilter="-1"
			partialOrderAlignmentBandConstant="300"
			partialOrderAlignmentBandFraction="0.025"
			partialOrderAlignmentSubMatrix="91 -114 -61 -123 0 -114 100 -125 -61 0 -31 -125 100 -114 0 -123 -61 -114 91 0 0 0 0 0 0"
			partialOrderAlignmentGapOpenPenalty1="400"
			partialOrderAlignmentGapExtensionPenalty1="30"
			partialOrderAlignmentGapOpenPenalty2="1200"
			partialOrderAlignmentGapExtensionPenalty2="1"
			partialOrderAlignmentDisableSeeding="0"
			partialOrderAlignmentMinimizerK="19"
			partialOrderAlignmentMinimizerW="10"
			partialOrderAlignmentMinimizerMinW="50"
			partialOrderAlignmentProgressiveMode="0"
		/>
	</bar>

	<!-- The reference tag provides parameters to cactus_reference, a method used to construct a reference genome for a given cactus database. -->
	<!-- numberOfNs is the number of Ns to insert into an ancestral sequence when an adjacency is uncertain, think of its as the Ns in a scaffold gap -->
	<!-- minNumberOfSequencesToSupportAdjacency is the number of sequences needed to bridge an adjacency -->
	<!-- makeScaffolds is a boolean that enables the bridging of uncertain adjacencies in an ancestral sequence providing the larger scale problem (parent flower in cactus), bridges the path. -->
	<!-- phi is the coefficient used to control how much weight to place on an adjacency given its phylogenetic distance from the reference node -->
	<reference
		matchingAlgorithm="blossom5"
		reference="reference"
		useSimulatedAnnealing="1"
		theta="0.0001"
		phi="1.0"
		maxWalkForCalculatingZ="100000"
		permutations="10"
		ignoreUnalignedGaps="1"
		wiggle="0.9999"
		numberOfNs="10"
		minNumberOfSequencesToSupportAdjacency="1"
		makeScaffolds="1"
	>
	</reference>
	<!-- The check tag for debugging -->
	<check
		runCheck="0"
	>
	</check>
	<!-- The hal tag controls the creation of hal and fasta files from the pipeline. -->
	<hal
		buildHal="1"
		buildFasta="1"
	>
	</hal>
	<!-- cactus-graphmap options -->
	<!-- assemblyName: special name of "virtual" minigraph assembly, which is just the list of sequences from the graph. -->
	<!-- universalMZFilter: only use minimizers who appear in this proportion (1.0 == 100%) of sequences that map over them. -->
	<!-- nodeBasedUniversal: universal filter calculated in terms of nodes istead of mapped regions. -->
	<!-- minMZBlockLength: only use minimizers that form contiguous blocks at least this long -->
	<!-- minMAPQ: ignore minigraph alignments with mapping quality less than this -->
	<!-- minGAFBlockLength: ignore minigraph alignments with block length less than this -->
	<!-- minGAFNodeLength: ignore minigraph nodes with length less than this -->
	<!-- minGAFQueryOverlapFilter: if 2 or more query regions in blocks of at least this size, filter them out. -->
	<!--                           if 1 query region in a block of at least this size overlaps query regions in blocks smaller than this, filter out the smaller ones -->
	<!--                           Filter is disabled when set to 0.  Any non-zero value will prevent query overlaps -->
	<!-- maskFilter: any softmasked sequence intervals > than this many bp will be hardmasked before being read by the minigraph mapper [negative value = disable]-->
	<!-- cpu: use up to this many cpus for each minigraph command. -->
	<graphmap
		 assemblyName="_MINIGRAPH_"
		 minigraphMapOptions="-S --write-mz -xasm"
		 universalMZFilter="0"
		 nodeBasedUniversal="0"
		 strictUniversal="0"
		 minMZBlockLength="0"
		 minMAPQ="5"
		 minGAFBlockLength="0"
		 minGAFNodeLength="0"
		 minGAFQueryOverlapFilter="10000"
		 maskFilter="-1"
		 cpu="6"
		 />
	<!-- cactus-graphmap-split options -->
	<!-- minQueryCoverage: At least this fraction of input contig must align to reference contig for it to be assigned. -->
	<!-- minQuerySmallCoverage: Like minQueryCoverage, but applied only to contigs with length < minQuerySmallThreshold. -->
	<!-- minQuerySmallThreshold: Threshold used to toggle between minQueryCoverage and minuQuerySmallCoverage. -->
	<!-- minQueryUniqueness: The ratio of the number of query bases aligned to the chosen ref contig vs the next best ref contig must exceed this threshold to not be considered ambigious. -->
	<!-- maxGap: Include indel gaps <= maxGap when counting minigraph coverage -->
	<!-- ambiguousName: Contigs deemed ambiguous using the above filters get added to a "contig" with this name, and are preserved in output. -->
	<!-- remap: 1: remap ambiguous contigs with minimap2 0: don't -->
	<!-- remapSplitOptions: extra rgfa-split options to apply when splitting after remapping (use -u 3000000 to enable autoclipping between contigs, add -s to allow within contig)-->
	<!-- useMinimapPAF: use minimap2 PAF for ambiguous contigs (rather than keeping their original mappings in the input PAF, requried if autoclipping enabled above) -->
	<graphmap_split
		 minQueryCoverage="0.65"
		 minQuerySmallCoverage="0.75"
		 minQuerySmallThreshold="10000000"
		 minQueryUniqueness="3"
		 maxGap="50000"
		 ambiguousName="_AMBIGUOUS_"
		 remap="1"
		 remapSplitOptions=""
		 useMinimapPAF="0"
		 />
	<!-- hal2vg options -->
	<!-- includeMinigraph: include minigraph node sequences as paths in output (note that cactus-graphmap-join will still remove them by default) -->
	<!-- includeAncestor: include ancestral reference sequences as paths in output -->
	<!-- prependGenomeNames: prepend each output path with the genome name -->
	<!-- hal2vgOptions: options to use in every hal2vg command -->
	<hal2vg
		 includeMinigraph="1"
		 includeAncestor="0"
		 prependGenomeNames="1"
		 hal2vgOptions="--progress --inMemory"
		 />
  	<multi_cactus>
		<outgroup
			strategy="greedyPreference"
			threshold="0"
			ancestor_quality_fraction="0.75"
                        max_num_outgroups="3"
		/>
	 	<decomposition
	 		self_alignment="false"
	 		default_internal_node_prefix="Anc"
			max_parallel_subtrees="50000"
	 	/>
  	</multi_cactus>
    <exportHal disk="2000000000"/>
	<consolidated></consolidated>
	<consolidated2></consolidated2>
</cactusWorkflowConfig>
